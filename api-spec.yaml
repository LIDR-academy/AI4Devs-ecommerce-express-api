openapi: 3.0.0
info:
  title: API de Tienda Online
  description: API RESTful para una tienda online desarrollada con Node.js, Express y MongoDB
  version: 1.0.0
servers:
  - url: /api
    description: Servidor de desarrollo

tags:
  - name: Productos
    description: Operaciones sobre productos
  - name: Categorías
    description: Operaciones sobre categorías
  - name: Usuarios
    description: Operaciones sobre usuarios
  - name: Pedidos
    description: Operaciones sobre pedidos

paths:
  /productos:
    get:
      summary: Obtener todos los productos
      tags:
        - Productos
      responses:
        '200':
          description: Lista de productos obtenida correctamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Producto'
        '500':
          description: Error del servidor
    post:
      summary: Crear un nuevo producto
      tags:
        - Productos
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductoInput'
      responses:
        '201':
          description: Producto creado correctamente
        '400':
          description: Datos inválidos
        '500':
          description: Error del servidor

  /productos/{id}:
    get:
      summary: Obtener un producto por ID
      tags:
        - Productos
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Producto obtenido correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producto'
        '404':
          description: Producto no encontrado
        '500':
          description: Error del servidor
    put:
      summary: Actualizar un producto
      tags:
        - Productos
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductoInput'
      responses:
        '200':
          description: Producto actualizado correctamente
        '400':
          description: Datos inválidos
        '404':
          description: Producto no encontrado
        '500':
          description: Error del servidor
    delete:
      summary: Eliminar un producto
      tags:
        - Productos
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Producto eliminado correctamente
        '404':
          description: Producto no encontrado
        '500':
          description: Error del servidor

  /categorias:
    get:
      summary: Obtener todas las categorías
      tags:
        - Categorías
      responses:
        '200':
          description: Lista de categorías obtenida correctamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Categoria'
        '500':
          description: Error del servidor
    post:
      summary: Crear una nueva categoría
      tags:
        - Categorías
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoriaInput'
      responses:
        '201':
          description: Categoría creada correctamente
        '400':
          description: Datos inválidos
        '500':
          description: Error del servidor

  /categorias/{id}:
    get:
      summary: Obtener una categoría por ID
      tags:
        - Categorías
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Categoría obtenida correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Categoria'
        '404':
          description: Categoría no encontrada
        '500':
          description: Error del servidor
    put:
      summary: Actualizar una categoría
      tags:
        - Categorías
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoriaInput'
      responses:
        '200':
          description: Categoría actualizada correctamente
        '400':
          description: Datos inválidos
        '404':
          description: Categoría no encontrada
        '500':
          description: Error del servidor
    delete:
      summary: Eliminar una categoría
      tags:
        - Categorías
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Categoría eliminada correctamente
        '404':
          description: Categoría no encontrada
        '500':
          description: Error del servidor

  /usuarios:
    get:
      summary: Obtener todos los usuarios
      tags:
        - Usuarios
      responses:
        '200':
          description: Lista de usuarios obtenida correctamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Usuario'
        '500':
          description: Error del servidor
    post:
      summary: Crear un nuevo usuario
      tags:
        - Usuarios
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsuarioInput'
      responses:
        '201':
          description: Usuario creado correctamente
        '400':
          description: Datos inválidos
        '500':
          description: Error del servidor

  /usuarios/{id}:
    get:
      summary: Obtener un usuario por ID
      tags:
        - Usuarios
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Usuario obtenido correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        '404':
          description: Usuario no encontrado
        '500':
          description: Error del servidor
    put:
      summary: Actualizar un usuario
      tags:
        - Usuarios
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsuarioInput'
      responses:
        '200':
          description: Usuario actualizado correctamente
        '400':
          description: Datos inválidos
        '404':
          description: Usuario no encontrado
        '500':
          description: Error del servidor
    delete:
      summary: Eliminar un usuario
      tags:
        - Usuarios
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Usuario eliminado correctamente
        '404':
          description: Usuario no encontrado
        '500':
          description: Error del servidor

  /pedidos:
    get:
      summary: Obtener todos los pedidos
      tags:
        - Pedidos
      responses:
        '200':
          description: Lista de pedidos obtenida correctamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pedido'
        '500':
          description: Error del servidor
    post:
      summary: Crear un nuevo pedido
      tags:
        - Pedidos
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PedidoInput'
      responses:
        '201':
          description: Pedido creado correctamente
        '400':
          description: Datos inválidos
        '500':
          description: Error del servidor

  /pedidos/{id}:
    get:
      summary: Obtener un pedido por ID
      tags:
        - Pedidos
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Pedido obtenido correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pedido'
        '404':
          description: Pedido no encontrado
        '500':
          description: Error del servidor
    put:
      summary: Actualizar un pedido
      tags:
        - Pedidos
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PedidoInput'
      responses:
        '200':
          description: Pedido actualizado correctamente
        '400':
          description: Datos inválidos
        '404':
          description: Pedido no encontrado
        '500':
          description: Error del servidor
    delete:
      summary: Eliminar un pedido
      tags:
        - Pedidos
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Pedido eliminado correctamente
        '404':
          description: Pedido no encontrado
        '500':
          description: Error del servidor

components:
  schemas:
    Producto:
      type: object
      properties:
        id:
          type: string
          description: ID único del producto
        nombre:
          type: string
          description: Nombre del producto
        descripcion:
          type: string
          description: Descripción del producto
        precio:
          type: number
          description: Precio del producto
        stock:
          type: integer
          description: Cantidad disponible del producto
        categoria:
          $ref: '#/components/schemas/Categoria'
          description: Categoría a la que pertenece el producto
        imagenes:
          type: array
          items:
            type: string
          description: URLs de las imágenes del producto
        createdAt:
          type: string
          format: date-time
          description: Fecha de creación
        updatedAt:
          type: string
          format: date-time
          description: Fecha de última actualización
      required:
        - nombre
        - precio
        - categoria

    ProductoInput:
      type: object
      properties:
        nombre:
          type: string
          description: Nombre del producto
        descripcion:
          type: string
          description: Descripción del producto
        precio:
          type: number
          description: Precio del producto
        stock:
          type: integer
          description: Cantidad disponible del producto
        categoriaId:
          type: string
          description: ID de la categoría a la que pertenece el producto
        imagenes:
          type: array
          items:
            type: string
          description: URLs de las imágenes del producto
      required:
        - nombre
        - precio
        - categoriaId

    Categoria:
      type: object
      properties:
        id:
          type: string
          description: ID único de la categoría
        nombre:
          type: string
          description: Nombre de la categoría
        descripcion:
          type: string
          description: Descripción de la categoría
        createdAt:
          type: string
          format: date-time
          description: Fecha de creación
        updatedAt:
          type: string
          format: date-time
          description: Fecha de última actualización
      required:
        - nombre

    CategoriaInput:
      type: object
      properties:
        nombre:
          type: string
          description: Nombre de la categoría
        descripcion:
          type: string
          description: Descripción de la categoría
      required:
        - nombre

    Usuario:
      type: object
      properties:
        id:
          type: string
          description: ID único del usuario
        nombre:
          type: string
          description: Nombre del usuario
        email:
          type: string
          format: email
          description: Correo electrónico del usuario
        role:
          type: string
          enum: [cliente, admin]
          description: Rol del usuario
        createdAt:
          type: string
          format: date-time
          description: Fecha de creación
        updatedAt:
          type: string
          format: date-time
          description: Fecha de última actualización
      required:
        - nombre
        - email
        - role

    UsuarioInput:
      type: object
      properties:
        nombre:
          type: string
          description: Nombre del usuario
        email:
          type: string
          format: email
          description: Correo electrónico del usuario
        password:
          type: string
          format: password
          description: Contraseña del usuario
        role:
          type: string
          enum: [cliente, admin]
          description: Rol del usuario
      required:
        - nombre
        - email
        - password

    Pedido:
      type: object
      properties:
        id:
          type: string
          description: ID único del pedido
        usuario:
          $ref: '#/components/schemas/Usuario'
          description: Usuario que realiza el pedido
        productos:
          type: array
          items:
            type: object
            properties:
              producto:
                $ref: '#/components/schemas/Producto'
              cantidad:
                type: integer
                minimum: 1
              precio:
                type: number
          description: Productos incluidos en el pedido
        estado:
          type: string
          enum: [pendiente, enviado, entregado, cancelado]
          description: Estado del pedido
        total:
          type: number
          description: Monto total del pedido
        direccionEnvio:
          type: string
          description: Dirección de envío
        fechaCompra:
          type: string
          format: date-time
          description: Fecha en que se realizó la compra
        createdAt:
          type: string
          format: date-time
          description: Fecha de creación
        updatedAt:
          type: string
          format: date-time
          description: Fecha de última actualización
      required:
        - usuario
        - productos
        - estado
        - total
        - direccionEnvio

    PedidoInput:
      type: object
      properties:
        usuarioId:
          type: string
          description: ID del usuario que realiza el pedido
        productos:
          type: array
          items:
            type: object
            properties:
              productoId:
                type: string
              cantidad:
                type: integer
                minimum: 1
          description: Productos incluidos en el pedido
        direccionEnvio:
          type: string
          description: Dirección de envío
      required:
        - usuarioId
        - productos
        - direccionEnvio 